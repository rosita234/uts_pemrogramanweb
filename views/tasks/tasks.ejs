<!DOCTYPE html>
<html>
  <head>
    <title>Tasks</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css">
    <link rel="stylesheet" href="/css/style.css">
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/3.2.0/animate.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.css">
    <script src="http://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js"></script>
  </head>
  <body>
    <div class="container">
      <div class="row-top d-flex justify-content-between align-items-center">
        <h2>To Do List!</h2>
        <button type="button" class="btn btn-danger" onclick="logout()">Logout</button>
      </div>
    <!-- Task Filter Dropdown -->
      <div class="d-flex justify-content-between align-items-center mt-3 mb-2">
        <div class="d-flex align-items-center">
          <label for="taskFilter" class="form-label me-2 mb-0">Filter by Status:</label>
          <select id="taskFilter" class="form-select w-auto" onchange="loadTasks()">
            <option selected value="all">All Tasks</option>
            <option value="completed">Completed</option>
            <option value="pending">Pending</option>
          </select>
        </div>
        <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#modalAddTask">Add New Task</button>
      </div>
    
      <!-- Table for Tasks -->
      <table class="table table-bordered mt-3">
        <thead>
          <tr>
            <th>Title</th>
            <th>Category</th>
            <th>Description</th>
            <th>Deadline</th>
            <th>Status</th>
            <th>Actions</th>
          </tr>
        </thead>
        <tbody id="taskList">
          <!-- Tasks dynamically loaded here by loadTasks() -->
        </tbody>
      </table>
    </div>

    <!-- Edit Task Modal -->
    <div class="modal fade" id="modalEditTask" tabindex="-1">
      <div class="modal-dialog">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title">Edit Task</h5>
            <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
          </div>
          <form id="editTaskForm">
            <div class="modal-body">
              <input type="hidden" id="editTaskId" name="taskId"> 
              <p class="text-start mb-1">Title</p>
              <input id="editTitle" name="title" type="text" class="form-control mb-2" placeholder="Edit Task Title Here" required>
              <p class="text-start mb-1">Category</p>
              <input id="editKategori" name="kategori" type="text" class="form-control mb-2" placeholder="Edit Task Category" required>
              <p class="text-start mb-1">Description</p>
              <input id="editDescription" name="description" type="text" class="form-control mb-2" placeholder="Edit Task Description" required>
              <p class="text-start mb-1">Deadline</p>
              <input id="editDeadline" name="deadline" type="date" class="form-control mb-2" placeholder="Edit Task Deadline" required>
              <p class="text-start mb-1">Status</p>
              <select id="editCompleted" name="completed" class="form-select">
                <option value="false">Pending</option>
                <option value="true">Completed</option>
              </select>
            </div>
            <div class="modal-footer">
              <button class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
              <button type="submit" class="btn btn-primary">Update Task</button>
            </div>
          </form>
        </div>
      </div>
    </div>



    <!-- Add Task Modal -->
    <div class="modal fade" id="modalAddTask" tabindex="-1">
      <div class="modal-dialog">
          <div class="modal-content">
              <div class="modal-header">
                  <h5 class="modal-title">Add Task</h5>
                  <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
              </div>
              <form id="addTaskForm">
                <div class="modal-body">
                  <p class="text-start mb-1">Title</p>
                  <input id="title" name="title" type="text" class="form-control mb-2" placeholder="Add Task Title Here" required>
                  <p class="text-start mb-1">Category</p>
                  <input id="kategori" name="kategori" type="text" class="form-control mb-2" placeholder="What kind of task is this?" required>
                  <p class="text-start mb-1">Description</p>
                  <input id="description" name="description" type="text" class="form-control mb-2" placeholder="Describe what the task is about" required>
                  <p class="text-start mb-1">Deadline</p>
                  <input id="deadline" name="deadline" type="date" class="form-control mb-2" placeholder="When's the due date?" required>
                </div>
                <div class="modal-footer">
                  <button class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                  <button type="submit" class="btn btn-primary">Add Task</button>
                </div>
              </form>
          </div>
      </div>
    </div>

    <!-- Try toast by button -->
    <!-- <button type="button" class="btn btn-primary" id="socketToastBtn" onclick="$('#socketToast').show()">press</button> -->
     
    <div class="position-absolute end-0 bottom-0 m-5">
      <div id="socketToast" class="toast" role="alert" aria-live="assertive" aria-atomic="true">
        <div class="toast-header bg-primary text-white">
          <strong class="me-auto">New Task Alert</strong>
          <button type="button" class="btn-close btn-close-white" data-bs-dismiss="toast" aria-label="Close"></button>
        </div>
        <div class="toast-body">
          <p class="toast-body-text">Text</p>
        </div>
      </div>
    </div>

    <script>
      // Helper Function to Get Token from LocalStorage
      const getToken = () => {
        const token = localStorage.getItem("token");
        console.log("Token Sent:", token); // Debug Token
        return token;
      };

      // Handle Task Form Submission
      document.getElementById("addTaskForm").addEventListener("submit", async function(event) {
        event.preventDefault();

        // Get Form Data (title, kategori, description, deadline)
        const title = document.getElementById("title").value;
        const kategori = document.getElementById("kategori").value;
        const description = document.getElementById("description").value;
        const deadline = document.getElementById("deadline").value;

        // Send POST Request to Create Task
        try {
          // const response = await fetch("/api/tasks", {
          //   method: "POST",
          //   headers: {
          //     "Content-Type": "application/json",
          //     "Authorization": `Bearer ${getToken()}`
          //   },
          //   body: JSON.stringify({ title, description })
          // });
          // let data = {};
          // $.ajax("/api/tasks", {
          //   method: "POST",
          //   headers: {
          //     "Content-Type": "application/json",
          //     "Authorization": `Bearer ${getToken()}`
          //   }}).done((response) => {
          //     data = response.json();
          //   });

          // Only include deadline if it is not empty
            const requestData = {
              title,
              kategori,
              description
            };

            if (deadline) {
              requestData.deadline = deadline;
            }
            
            let data = {};
            $.ajax({
              url: "/api/tasks",
              type: "POST",
              data: JSON.stringify(requestData),
              headers: {
                "Content-Type": "application/json",
                "Authorization": `Bearer ${getToken()}`,
              },
              dataType: "json",
              complete: function(response) {
                data = response.responseJSON;
              },  
            });

          // const data = await response.json();
          console.log("Task Creation Response:", data);

          if (data) {
            alert("Task added successfully!");

            // Close Modal
            const modalElement = document.querySelector('#modalAddTask');
            const modalInstance = bootstrap.Modal.getInstance(modalElement);
            modalInstance.hide();

            // Clear Form Fields
            document.getElementById("title").value = "";
            document.getElementById("kategori").value = "";
            document.getElementById("description").value = "";
            document.getElementById("deadline").value = "";

            // Reload Tasks
            loadTasks();
          } else {
            alert("Failed to add task: " + (data.message || "Unknown error"));
          }
        } catch (error) {
          console.error("Failed to create task:", error);
          alert("An error occurred while creating the task.");
        }
      });

      // Fetch Tasks and Populate the Table
      const loadTasks = async () => {
        try {
          const response = await fetch("/api/tasks", {
            method: "GET",
            headers: {
              "Content-Type": "application/json",
              "Authorization": `Bearer ${getToken()}`
            }
          });

          if (response.ok) {
            const tasks = await response.json();
            console.log("Tasks Array:", tasks); // Check if tasks is an array
            
            // Get item by selected filter value
            const filter = document.getElementById("taskFilter").value;
            console.log("Selected Filter:", filter);

            // Filter tasks based on selected filter value
            const filteredTasks = tasks.filter(task => {
              if (filter === "completed") return task.completed;
              if (filter === "pending") return !task.completed;
              return true; // Show all tasks if "all" is selected
            });

            // Display Tasks on Page (in Table)
            const taskList = document.getElementById("taskList");
            taskList.innerHTML = ""; // Clear the existing tasks

            filteredTasks.forEach(task => {
              taskList.innerHTML += `
                <tr>
                  <td>${task.title}</td>
                  <td>${task.kategori}</td>
                  <td>${task.description}</td>
                  <td>${task.deadline}</td>
                  <td>
                    ${task.completed 
                      ? '<span class="badge bg-success">Completed</span>' 
                      : '<span class="badge bg-warning">Pending</span>'}
                  </td>
                  <td>
                   <button class="btn btn-dark btn-sm" onclick="openEditModal('${task.id}', '${task.title}', '${task.kategori}', '${task.description}', '${task.deadline}', '${task.completed}')">
                    <i class="bi bi-pencil"></i> Edit
                    </button>
                    <button class="btn btn-danger btn-sm" onclick="deleteTask('${task.id}')">
                      <i class="bi bi-trash"></i> Delete
                    </button>
                  </td>
                </tr>
              `;
            });
          } else {
            alert("Access denied. Please log in.");
            window.location.href = "/api/auth/login";
          }
        } catch (error) {
          console.error("Failed to load tasks:", error);
        }
      };

      // Open Edit Modal
      const openEditModal = (id, title, kategori, description, deadline, completed) => {
          // Populate the modal with existing task data
          document.getElementById("editTaskId").value = id;
          document.getElementById("editTitle").value = title;
          document.getElementById("editKategori").value = kategori;
          document.getElementById("editDescription").value = description;
          document.getElementById("editDeadline").value = deadline;
          document.getElementById("editCompleted").value = completed;

          // Show the modal
          new bootstrap.Modal(document.getElementById("modalEditTask")).show();
        };

      // Update Task
      document.getElementById("editTaskForm").addEventListener("submit", async function(event) {
        event.preventDefault();

        const taskId = document.getElementById("editTaskId").value;
        const title = document.getElementById("editTitle").value;
        const kategori = document.getElementById("editKategori").value;
        const description = document.getElementById("editDescription").value;
        const deadline = document.getElementById("editDeadline").value || new Date().toISOString();
        const completed = document.getElementById("editCompleted").value;

        try {
          const response = await fetch(`/api/tasks/${taskId}`, {
            method: "PUT",
            headers: {
              "Content-Type": "application/json",
              "Authorization": `Bearer ${getToken()}`
            },
            body: JSON.stringify({ title, kategori, description, deadline, completed })
          });

          if (response.ok) {
            alert("Task updated successfully!");
            const modalElement = document.getElementById("modalEditTask");
            const modalInstance = bootstrap.Modal.getInstance(modalElement);
            modalInstance.hide();
            loadTasks();
          } else {
            alert("Failed to update task.");
          }
        } catch (error) {
          console.error("Failed to update task:", error);
          alert("An error occurred while updating the task.");
        }
      });

      // Edit Task Function (To be implemented later)
      const editTask = async (id) => {
        if (confirm("Are you sure you want to delete this task?")) {
          try {
            const response = await fetch(`/api/tasks/${id}`, {
              method: "PATCH",
              headers: {
                "Authorization": `Bearer ${getToken()}`
              }
            });

            if (response.ok) {
              alert("Task edited successfully!");
              loadTasks(); // Reload tasks to reflect changes
            } else {
              alert("Failed to edit task.");
            }
          } catch (error) {
            console.error("Failed to edit task:", error);
            alert("An error occurred while editing the task.");
          }
        }
      };

      // Delete Task Function
      const deleteTask = async (id) => {
        if (confirm("Are you sure you want to delete this task?")) {
          try {
            const response = await fetch(`/api/tasks/${id}`, {
              method: "DELETE",
              headers: {
                "Authorization": `Bearer ${getToken()}`
              }
            });

            if (response.ok) {
              alert("Task deleted successfully!");
              loadTasks(); // Reload tasks to reflect changes
            } else {
              alert("Failed to delete task.");
            }
          } catch (error) {
            console.error("Failed to delete task:", error);
            alert("An error occurred while deleting the task.");
          }
        }
      };

      //logout from logged in user
      const logout = () => {
        document.cookie = "token=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;";
        window.location.href = "/api/auth/login";
      };

      const socket = new WebSocket("ws://localhost:3000/socket"); 
      socket.onopen = function() {
        console.log("WebSocket connection established.");
      };

      socket.onmessage = function(event) {
        $("#socketToast .toast-body-text").text(event.data);
        $("#socketToast").toast("show");
      };

      socket.onclose = function() {
        alert("Connection closed...");
      };

      // Call loadTasks on page load
      loadTasks();
    </script>
  </body>
</html>
